#!/usr/bin/env python3
"""
Test script to verify the MP3 to MIDI converter implementation
"""

def test_converter_structure():
    """Test that the converter has all required methods"""
    try:
        from mp3_to_midi_converter import MP3ToMIDIConverter
        
        converter = MP3ToMIDIConverter()
        
        # Check that generative methods exist
        required_methods = [
            'generate_inspired_melody',
            '_detect_key_signature',
            '_get_scale_notes',
            '_generate_similar_note',
            '_generate_jazz_note',
            '_generate_classical_note',
            '_generate_ambient_note',
            '_generate_creative_note',
            'generate_harmony',
            '_generate_chord_progression',
            'create_variations',
            '_apply_rhythmic_variation',
            '_apply_melodic_variation',
            '_apply_dynamic_variation'
        ]
        
        missing_methods = []
        for method in required_methods:
            if not hasattr(converter, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå Missing methods: {missing_methods}")
            return False
        else:
            print("‚úÖ All generative methods present in converter")
            return True
            
    except Exception as e:
        print(f"‚ùå Error testing converter: {e}")
        return False

def test_gui_structure():
    """Test that the GUI has the required helper methods"""
    try:
        import tkinter as tk
        from MIDI import MIDIGeneratorGUI
        
        # Create a temporary root window
        root = tk.Tk()
        root.withdraw()  # Hide the window
        
        app = MIDIGeneratorGUI()
        
        # Check that GUI helper methods exist
        required_methods = [
            'analyze_audio_for_gui',
            'generate_inspired_music_gui',
            'create_variations_gui',
            'preview_conversion'
        ]
        
        missing_methods = []
        for method in required_methods:
            if not hasattr(app, method):
                missing_methods.append(method)
        
        root.destroy()
        
        if missing_methods:
            print(f"‚ùå Missing GUI methods: {missing_methods}")
            return False
        else:
            print("‚úÖ All GUI helper methods present")
            return True
            
    except Exception as e:
        print(f"‚ùå Error testing GUI: {e}")
        return False

def test_generative_functionality():
    """Test basic generative functionality"""
    try:
        from mp3_to_midi_converter import MP3ToMIDIConverter
        
        converter = MP3ToMIDIConverter()
        
        # Test with sample analysis data
        sample_analysis = {
            'tempo': 120,
            'chroma_complexity': 0.1,
            'harmonic_ratio': 0.7,
            'onset_density': 2.0,
            'duration': 30.0
        }
        
        # Test key detection
        key = converter._detect_key_signature(sample_analysis)
        print(f"‚úÖ Key detection works: {key}")
        
        # Test scale generation
        scale_notes = converter._get_scale_notes(key, 'similar')
        print(f"‚úÖ Scale generation works: {len(scale_notes)} notes")
        
        # Test note generation
        note = converter._generate_similar_note(sample_analysis, scale_notes, 0.0)
        print(f"‚úÖ Note generation works: {note}")
        
        # Test melody generation
        melody = converter.generate_inspired_melody(sample_analysis, duration=5.0, style='similar')
        print(f"‚úÖ Melody generation works: {len(melody)} notes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing generative functionality: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Testing MP3 to MIDI Converter Implementation")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 3
    
    print("\n1. Testing Converter Structure...")
    if test_converter_structure():
        tests_passed += 1
    
    print("\n2. Testing GUI Structure...")
    if test_gui_structure():
        tests_passed += 1
    
    print("\n3. Testing Generative Functionality...")
    if test_generative_functionality():
        tests_passed += 1
    
    print("\n" + "=" * 50)
    print(f"Tests Passed: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ All tests passed! Implementation is working correctly.")
        print("\nüìã Summary of improvements:")
        print("‚úÖ Fixed generative methods placement in MP3ToMIDIConverter class")
        print("‚úÖ Added scrollable dialog with generate button at top") 
        print("‚úÖ Implemented helper methods for GUI integration")
        print("‚úÖ Enhanced user experience with better layout")
        print("‚úÖ Added proper error handling and progress reporting")
    else:
        print("‚ùå Some tests failed. Please check the implementation.")
